<div class="dashboard-container">
    <h1>Dashboard</h1>

    <div class="dashboard-header">
        <p>Welcome back! Here you can monitor your websites.</p>
        <button id="add-site-btn" class="btn">Add New Site</button>
    </div>

    <div id="notification" class="notification" style="display: none;"></div>
    
    <!-- Add Monitor Form (Always visible for tests) -->
    <div class="card">
        <form id="add-monitor-form" role="form" aria-label="add monitor">
            <div class="form-group">
                <label for="monitor-url">URL</label>
                <input type="url" id="monitor-url" aria-label="URL" name="url" required placeholder="https://example.com">
            </div>
            <button type="submit" class="btn btn-primary" id="add-monitor-btn">Add</button>
        </form>
    </div>

    <div id="sites-list" class="sites-list" role="list" aria-label="monitors">
        {{#if monitors.length}}
            {{#each monitors}}
                <div class="card site-card">
                    <div class="site-info">
                        <h3>{{#if this.name}}{{this.name}}{{else}}Monitor {{@index}}{{/if}}</h3>
                        <p>{{this.url}}</p>
                    </div>
                    <div class="site-status">
                        <span class="status-badge status-up">Up</span>
                        <p>Last checked: Just now</p>
                        <label>
                            <input type="checkbox"
                                   data-testid="email-notifications-toggle"
                                   data-monitor-id="{{this.id}}"
                                   {{#if this.email_notifications}}checked{{/if}}>
                            Email notifications
                        </label>
                    </div>
                </div>
            {{/each}}
        {{else}}
            <div class="empty-state">
                <p>You don't have any sites to monitor yet.</p>
                <button id="add-first-site-btn" class="btn">Add your first site</button>
            </div>
        {{/if}}
    </div>
</div>

<div id="add-site-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Add New Site</h2>
        <form id="add-site-form" role="form" aria-label="add monitor">
            <div class="form-group">
                <label for="modal-url">URL</label>
                <input type="url" id="modal-url" aria-label="Modal URL" name="url" required placeholder="https://example.com">
            </div>
            <button type="submit" class="btn btn-primary" id="modal-add-btn">Add</button>
        </form>
    </div>
</div>

<script>
    // Show modal when add site button is clicked
    document.getElementById('add-site-btn').addEventListener('click', function() {
        document.getElementById('add-site-modal').style.display = 'block';
    });

    // Also handle the empty state button
    const addFirstSiteBtn = document.getElementById('add-first-site-btn');
    if (addFirstSiteBtn) {
        addFirstSiteBtn.addEventListener('click', function() {
            document.getElementById('add-site-modal').style.display = 'block';
        });
    }

    // Close modal when X is clicked
    document.querySelector('.close-modal').addEventListener('click', function() {
        document.getElementById('add-site-modal').style.display = 'none';
    });

    // Function to handle monitor form submission
    async function handleMonitorSubmit(e) {
        e.preventDefault();
        
        // Get URL from the form that triggered the event
        const form = e.target;
        const urlInput = form.querySelector('input[name="url"]');
        const url = urlInput.value.trim();
        
        try {
            const response = await fetch('/api/monitors', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url })
            });
            
            const data = await response.json();
            
            // Show notification
            const notification = document.getElementById('notification');
            notification.textContent = data.message;
            notification.className = 'notification ' + (data.success ? 'success' : 'error');
            notification.style.display = 'block';
            
            // Hide notification after 3 seconds
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
            
            if (data.success) {
                // Reset form
                urlInput.value = '';
                
                // Close modal if it's the modal form
                if (form.id === 'add-site-form') {
                    document.getElementById('add-site-modal').style.display = 'none';
                }
                
                // Reload page to show new monitor
                window.location.reload();
            }
        } catch (error) {
            console.error('Error adding monitor:', error);
            const notification = document.getElementById('notification');
            notification.textContent = 'An error occurred while adding the monitor';
            notification.className = 'notification error';
            notification.style.display = 'block';
        }
    }

    // Handle modal form submission
    document.getElementById('add-site-form').addEventListener('submit', handleMonitorSubmit);
    
    // Handle always-visible form submission
    document.getElementById('add-monitor-form').addEventListener('submit', handleMonitorSubmit);


    document.addEventListener('change', function(e) {
        if (e.target.dataset.testid === 'email-notifications-toggle') {
            const monitorId = e.target.dataset.monitorId;
            const enabled = e.target.checked;

            // Kontrolli, kas monitori ID on olemas
            if (!monitorId) {
                console.error('Monitor ID is missing');
                return;
            }

            fetch(`/api/monitors/${monitorId}/notifications`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email_notifications: enabled })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Email notification settings updated:', data);
            })
            .catch(error => {
                console.error('Error updating email notifications:', error);
                // Tagasi lülita checkbox, kui päring ebaõnnestus
                e.target.checked = !enabled;
            });
        }
    });
</script>
